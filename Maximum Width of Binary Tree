//Given the root of a binary tree, return the maximum width of the given tree.

//The maximum width of a tree is the maximum width among all levels.

//The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.

//It is guaranteed that the answer will in the range of a 32-bit signed integer.





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getheight(TreeNode* root)
    {
        if(root==NULL)  return NULL;
        int lp=getheight(root->left);
        int rp=getheight(root->right);
        return max(lp,rp)+1;
    }
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL)
        return NULL;
        int lh=getheight(root->left);
        int rh=getheight(root->right);
        int lw=widthOfBinaryTree(root->left);
        int rw=widthOfBinaryTree(root->right);
        return max(lh+rh+1,max(lw,rw));
    }
};
