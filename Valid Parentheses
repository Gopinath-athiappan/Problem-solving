/*Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
*/




class Solution {
public:
    bool isValid(string str) 
    {
        stack<char>s;
        for(int i=0; str[i]!='\0';i++)
        {
            if((str[i]=='(')||(str[i]==')'))
            {
                if(str[i]=='(')
                s.push(str[i]);
                else
                {
                    if((s.empty())||(s.top()!='('))
                    return false;
                    if(s.top()=='(')
                    s.pop();
                }
            }
            else if((str[i]=='[')||(str[i]==']'))
            {
                if(str[i]=='[')
                s.push(str[i]);
                else
                {
                    if((s.empty())||(s.top()!='['))
                    return false;
                    if(s.top()=='[')
                    s.pop();
                }
            }
            else if((str[i]=='{')||(str[i]=='}'))
            {
                if(str[i]=='{')
                s.push(str[i]);
                else
                {
                    if((s.empty())||(s.top()!='{'))
                    return false;
                    if(s.top()=='{')
                    s.pop();
                }
            }
        }
        if(s.empty())
        return true;
        return false;
    }
};
